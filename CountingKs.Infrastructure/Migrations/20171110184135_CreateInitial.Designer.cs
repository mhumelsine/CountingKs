// <auto-generated />
using CountingKs.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CountingKs.Infrastructure.Migrations
{
    [DbContext(typeof(CountingKsContext))]
    [Migration("20171110184135_CreateInitial")]
    partial class CreateInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CountingKs.Core.DTOs.ApiUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppId");

                    b.Property<string>("Name");

                    b.Property<string>("Secret");

                    b.HasKey("Id");

                    b.ToTable("ApiUser","Security");
                });

            modelBuilder.Entity("CountingKs.Core.DTOs.AuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApiUserId");

                    b.Property<DateTime>("Expiration");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.HasIndex("ApiUserId");

                    b.ToTable("AuthToken","Security");
                });

            modelBuilder.Entity("CountingKs.Core.DTOs.Diary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CurrentDate");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Diary","FoodDiaries");
                });

            modelBuilder.Entity("CountingKs.Core.DTOs.DiaryEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DairyId");

                    b.Property<int?>("DiaryId");

                    b.Property<int>("FoodItemId");

                    b.Property<int?>("MeasureId");

                    b.Property<int>("MesatureId");

                    b.Property<double>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("DiaryId");

                    b.HasIndex("FoodItemId");

                    b.HasIndex("MeasureId");

                    b.ToTable("DiaryEntry","FoodDiaries");
                });

            modelBuilder.Entity("CountingKs.Core.DTOs.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Food","Nutrition");
                });

            modelBuilder.Entity("CountingKs.Core.DTOs.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Calories");

                    b.Property<double>("Carbohydrates");

                    b.Property<double>("Cholestrol");

                    b.Property<string>("Description");

                    b.Property<double>("Fiber");

                    b.Property<int>("FoodId");

                    b.Property<double>("Iron");

                    b.Property<double>("Protein");

                    b.Property<double>("SaturatedFat");

                    b.Property<double>("Sodium");

                    b.Property<double>("Sugar");

                    b.Property<double>("TotalFat");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("Measure","Nutrition");
                });

            modelBuilder.Entity("CountingKs.Core.DTOs.AuthToken", b =>
                {
                    b.HasOne("CountingKs.Core.DTOs.ApiUser", "ApiUser")
                        .WithMany()
                        .HasForeignKey("ApiUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CountingKs.Core.DTOs.DiaryEntry", b =>
                {
                    b.HasOne("CountingKs.Core.DTOs.Diary", "Diary")
                        .WithMany("Entries")
                        .HasForeignKey("DiaryId");

                    b.HasOne("CountingKs.Core.DTOs.Food", "FoodItem")
                        .WithMany()
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CountingKs.Core.DTOs.Measure", "Measure")
                        .WithMany()
                        .HasForeignKey("MeasureId");
                });

            modelBuilder.Entity("CountingKs.Core.DTOs.Measure", b =>
                {
                    b.HasOne("CountingKs.Core.DTOs.Food")
                        .WithMany("Measures")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
